package com.example.service;

import com.example.model.ExamCenter;
import org.springframework.web.multipart.MultipartFile;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

public interface ExamCenterService {
    List<ExamCenter> getExamCentersForDownload();
    List<ExamCenter> findNearest3ExamCenters(Integer pincode);
    List<ExamCenter> getCentersForDistrict(Integer districtId);
    Map<String, Object> getSeatsAvailability();
    List<ExamCenter> getCentersForState(Integer stateId, Integer districtId);
    List<ExamCenter> getCentersByCapacity(Integer minCapacity, Integer maxCapacity);
    boolean validateCenterCode(String centerCode);
    void updateCenterStatus(Long centerId, String status);
    void updateCenterCapacity(Long centerId, Integer capacity);
    byte[] generateExamCenterListExcel();
    void bulkUpdateExamCenters(MultipartFile file);
    List<ExamCenter> getAllExamCenters();
    ExamCenter getExamCenterById(Long id);
    List<ExamCenter> getExamCentersByState(Long stateId);
    List<ExamCenter> getExamCentersByDistrict(Long districtId);
    List<ExamCenter> findNearestExamCenters(Integer pincode, Long examId);
    List<ExamCenter> getSimilarCenters(Long centerId);
    ExamCenter createExamCenter(ExamCenter examCenter);
    ExamCenter updateExamCenter(Long id, ExamCenter examCenter);
    void deleteExamCenter(Long id);
    Map<Long, Integer> getCenterWisePendingScheduleCount();
    byte[] exportExamCenters();
    List<ExamCenter> getCentersForExam(Long examId);
    List<ExamCenter> getCentersForUser(Long userId);
    ExamCenter getCenterById(Long id);
    ExamCenter createCenter(ExamCenter center);
    ExamCenter updateCenter(Long id, ExamCenter center);
    void deleteCenter(Long id);
    List<ExamCenter> searchCenters(String query);
    List<ExamCenter> getCentersByFeeRange(Double minFee, Double maxFee);
    List<ExamCenter> getCentersByStatus(String status);
    List<ExamCenter> getCentersByDateRange(LocalDateTime startDate, LocalDateTime endDate);
    List<ExamCenter> getCentersByDistance(Double latitude, Double longitude, Double radius);
    List<ExamCenter> getCentersByExamDate(LocalDateTime examDate);
    List<ExamCenter> getCentersByExamTimeSlot(String timeSlot);
    List<ExamCenter> getCentersByExamType(String examType);
    List<ExamCenter> getCentersByExamLevel(String examLevel);
    List<ExamCenter> getCentersByExamCategory(String examCategory);
    List<ExamCenter> getCentersByExamSubject(String examSubject);
    List<ExamCenter> getCentersByExamLanguage(String examLanguage);
    List<ExamCenter> getCentersByExamDuration(Integer duration);
    List<ExamCenter> getCentersByExamFee(Double fee);
    List<ExamCenter> getCentersByExamMaxCandidates(Integer maxCandidates);
    List<ExamCenter> getCentersByExamStatus(String status);
    List<ExamCenter> getCentersByExamRegistrationStartDate(LocalDateTime startDate);
    List<ExamCenter> getCentersByExamRegistrationEndDate(LocalDateTime endDate);
    List<ExamCenter> getCentersByExamStartDate(LocalDateTime startDate);
    List<ExamCenter> getCentersByExamEndDate(LocalDateTime endDate);
    List<ExamCenter> getCentersByExamCreatedDate(LocalDateTime createdDate);
    List<ExamCenter> getCentersByExamUpdatedDate(LocalDateTime updatedDate);
    List<ExamCenter> getCentersByExamCreatedBy(String createdBy);
    List<ExamCenter> getCentersByExamUpdatedBy(String updatedBy);
}